{"version":3,"sources":["ComponentBox/Circle.jsx","ComponentBox/Square.jsx","ComponentBox/Diamond.jsx","ComponentBox/index.jsx","Canvas/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Circle","className","draggable","onDragStart","ev","dataTransfer","setData","Square","Diamond","ComponentBox","Canvas","useState","ctx","setCtx","preCoordinate","setPreCoordinate","useEffect","document","getElementById","getContext","drawCircle","useCallback","x","y","beginPath","arc","Math","PI","stroke","drawSquare","moveTo","lineTo","drawDiamond","diagonal","sqrt","id","height","width","onDrop","preventDefault","data","getData","currentCoordinate","canvas","event","rect","getBoundingClientRect","clientX","left","clientY","top","getMousePos","fromX","fromY","toX","toY","theta","headlen","color","angle","atan2","angle1","angle2","topX","cos","topY","sin","botX","botY","save","arrowX","arrowY","strokeStyle","lineWidth","restore","drawArrow","console","log","onDragOver","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c4f1fb4.chunk.js","sourcesContent":["import React from \"react\";\r\nexport default function Circle() {\r\n    return (\r\n        <div\r\n            className=\"circle\"\r\n            draggable={true}\r\n            onDragStart={function drag(ev) {\r\n                ev.dataTransfer.setData(\"Text\", \"circle\");\r\n            }}\r\n        ></div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nexport default function Square() {\r\n    return (\r\n        <div\r\n            className=\"square\"\r\n            draggable={true}\r\n            onDragStart={function drag(ev) {\r\n                ev.dataTransfer.setData(\"Text\", \"square\");\r\n            }}\r\n        ></div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nexport default function Diamond() {\r\n    return (\r\n        <div\r\n            className=\"diamond\"\r\n            draggable={true}\r\n            onDragStart={function drag(ev) {\r\n                ev.dataTransfer.setData(\"Text\", \"diamond\");\r\n            }}\r\n        ></div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Circle from \"./Circle\";\r\nimport Square from \"./Square\";\r\nimport Triangle from \"./Diamond\";\r\nimport \"./index.scss\";\r\n\r\nexport default function ComponentBox() {\r\n    return (\r\n        <div className=\"component-box\">\r\n            <h1>组件箱</h1>\r\n            <Circle></Circle>\r\n            <Square></Square>\r\n            <Triangle></Triangle>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useState, useEffect } from \"react\";\r\nimport \"./index.scss\";\r\nexport default function Canvas() {\r\n    const [ctx, setCtx] = useState(null);\r\n    const [preCoordinate, setPreCoordinate] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setCtx(document.getElementById(\"myCanvas\").getContext(\"2d\"));\r\n    }, []);\r\n\r\n    const drawCircle = useCallback(\r\n        ({ x, y }) => {\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, 50, 0, 2 * Math.PI);\r\n            ctx.stroke();\r\n        },\r\n        [ctx]\r\n    );\r\n\r\n    const drawSquare = useCallback(\r\n        ({ x, y }) => {\r\n            // 01 移动画笔moveTo(x,y) 坐标\r\n            ctx.moveTo(x - 50, y - 50);\r\n            // 02 划线  坐标\r\n            ctx.lineTo(x + 50, y - 50);\r\n            ctx.lineTo(x + 50, y + 50);\r\n            ctx.lineTo(x - 50, y + 50);\r\n            ctx.lineTo(x - 50, y - 50);\r\n            // 以上两行代码只是一个路径，但还没有绘制\r\n            // 03 绘制\r\n            ctx.stroke();\r\n        },\r\n        [ctx]\r\n    );\r\n\r\n    const drawDiamond = useCallback(\r\n        ({ x, y }) => {\r\n            const diagonal = Math.sqrt(100 * 100 * 2) / 2;\r\n            // 01 移动画笔moveTo(x,y) 坐标\r\n            ctx.moveTo(x, y - diagonal);\r\n            // 02 划线  坐标\r\n            ctx.lineTo(x + diagonal, y);\r\n            ctx.lineTo(x, y + diagonal);\r\n            ctx.lineTo(x - diagonal, y);\r\n            ctx.lineTo(x, y - diagonal);\r\n            // 以上两行代码只是一个路径，但还没有绘制\r\n            // 03 绘制\r\n            ctx.stroke();\r\n        },\r\n        [ctx]\r\n    );\r\n\r\n    function getMousePos(canvas, event) {\r\n        var rect = canvas.getBoundingClientRect();\r\n        var x = event.clientX - rect.left;\r\n        var y = event.clientY - rect.top;\r\n        return { x, y };\r\n    }\r\n\r\n    function drawArrow(ctx, fromX, fromY, toX, toY, theta, headlen, width, color) {\r\n        theta = typeof theta != \"undefined\" ? theta : 30;\r\n        headlen = typeof theta != \"undefined\" ? headlen : 10;\r\n        width = typeof width != \"undefined\" ? width : 1;\r\n        color = typeof color != \"color\" ? color : \"#000\";\r\n\r\n        // 计算各角度和对应的P2,P3坐标\r\n        var angle = (Math.atan2(fromY - toY, fromX - toX) * 180) / Math.PI,\r\n            angle1 = ((angle + theta) * Math.PI) / 180,\r\n            angle2 = ((angle - theta) * Math.PI) / 180,\r\n            topX = headlen * Math.cos(angle1),\r\n            topY = headlen * Math.sin(angle1),\r\n            botX = headlen * Math.cos(angle2),\r\n            botY = headlen * Math.sin(angle2);\r\n\r\n        ctx.save();\r\n        ctx.beginPath();\r\n\r\n        var arrowX = fromX - topX,\r\n            arrowY = fromY - topY;\r\n\r\n        ctx.moveTo(arrowX, arrowY);\r\n        ctx.moveTo(fromX, fromY);\r\n        ctx.lineTo(toX, toY);\r\n        arrowX = toX + topX;\r\n        arrowY = toY + topY;\r\n        ctx.moveTo(arrowX, arrowY);\r\n        ctx.lineTo(toX, toY);\r\n        arrowX = toX + botX;\r\n        arrowY = toY + botY;\r\n        ctx.lineTo(arrowX, arrowY);\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = width;\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    }\r\n\r\n    return (\r\n        <div className=\"canvas-wrap\">\r\n            <h1>画布</h1>\r\n            <canvas\r\n                id=\"myCanvas\"\r\n                height=\"700\"\r\n                width=\"1200\"\r\n                onDrop={function drop(ev) {\r\n                    ev.preventDefault();\r\n                    var data = ev.dataTransfer.getData(\"Text\");\r\n                    const currentCoordinate = getMousePos(document.getElementById(\"myCanvas\"), ev);\r\n                    if (data === \"circle\") {\r\n                        drawCircle(currentCoordinate);\r\n                    } else if (data === \"square\") {\r\n                        drawSquare(currentCoordinate);\r\n                    } else {\r\n                        drawDiamond(currentCoordinate);\r\n                    }\r\n\r\n                    if (preCoordinate) {\r\n                        drawArrow(ctx, preCoordinate.x, preCoordinate.y, currentCoordinate.x, currentCoordinate.y, 25, 20, 2, \"black\");\r\n                    }\r\n\r\n                    //设置上一个坐标\r\n                    setPreCoordinate(currentCoordinate);\r\n                    console.log(data);\r\n                }}\r\n                onDragOver={function allowDrop(ev) {\r\n                    ev.preventDefault();\r\n                }}\r\n            ></canvas>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useCallback, useMemo } from \"react\";\nimport ComponentBox from \"./ComponentBox\";\nimport Canvas from \"./Canvas\";\nimport \"./App.scss\";\nfunction App() {\n    return (\n        <div className=\"app\">\n            <ComponentBox></ComponentBox>\n            <Canvas></Canvas>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}